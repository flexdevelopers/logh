<?xml version="1.0" encoding="utf-8"?>
<project name="LOGH"
    default="Deploy All Development">

    <!-- load environment specific properties -->
    <property file="build/build.properties" />

    <!-- master fle build macros -->
    <import file="build/flex_build.xml" />

    <!-- build type = developer/pre-production/production -->
    <property name="build_type"
        value="developer" />

    <!-- ...web-app/ -->
    <property name="output.dir"
        value="${output.server.dir}" />

    <!-- ...grails-app/views -->
    <property name="output.dir.views"
              value="${output.grails.dir}views" />

    <!-- ...web-app/swf -->
    <property name="output.dir.application"
        value="${output.application.dir}" />

    <!-- ...web-app/swf/modules -->
    <property name="output.dir.modules"
        value="${output.dir.application}/modules" />

    <!-- ...web-app/swf/rsls -->
    <property name="output.dir.rsls"
        value="${output.dir.application}/rsls" />

    <!--
         **********************************************************************
         *
         *  Targets
         *
         ***********************************************************************
    -->

    <!-- Builds all items for development -->
    <target name="Deploy All Development"
        depends="Z-Set Output Directories, Z-Set Output Subdirectories, Z-Set Developer">
        <sequential>
            <antcall target="Copy Support Items" />
            <antcall target="Build Component Library SWC" />
            <antcall target="Build Styles" />
            <antcall target="Build Application" />
            <antcall target="Build All Modules" />
        </sequential>
    </target>

    <!-- Builds all items for pre-production -->
    <target name="Deploy All Pre-Production"
        depends="Z-Set Output Directories, Z-Set Output Subdirectories, Z-Set Pre-Production">
        <sequential>
            <antcall target="Copy Support Items" />
            <antcall target="Build Component Library" />
            <antcall target="Build Styles" />
            <!--<antcall target="Build Test Suite" />-->
            <antcall target="Build Application" />
            <antcall target="Build All Modules" />
        </sequential>
    </target>

    <!-- Builds all items for production -->
    <target name="Deploy All Production"
        depends="Z-Set Output Directories, Z-Set Output Subdirectories, Z-Set Production">
        <sequential>
            <antcall target="Copy Support Items" />
            <antcall target="Build Component Library" />
            <antcall target="Build Styles" />
            <antcall target="Build Application" />
            <antcall target="Build All Modules" />
            <!--<antcall target="Build ASDocs" />-->
        </sequential>
    </target>

    <target name="Z-Set Output Directories">
        <var name="output.dir"
             unset="true" />
        <property name="output.dir"
                  value="${output.server.dir}" />
        <echo>output.dir: ${output.dir}</echo>
    </target>

    <target name="Z-Set Output Subdirectories">
        <var name="output.dir.application"
             unset="true" />
        <property name="output.dir.application"
                  value="${output.application.dir}" />
        <var name="output.dir.modules"
             unset="true" />
        <property name="output.dir.modules"
                  value="${output.dir.application}/modules" />
        <var name="output.dir.rsls"
             unset="true" />
        <property name="output.dir.rsls"
                  value="${output.dir.application}/rsls" />
    </target>

    <target name="Z-Set Production">
        <var name="build_type"
             unset="true" />
        <property name="build_type"
                  value="production" />
        <echo>Build type: ${build_type}</echo>
    </target>

    <target name="Z-Set Pre-Production">
        <var name="build_type"
             unset="true" />
        <property name="build_type"
                  value="pre-production" />
        <echo>Build type: ${build_type}</echo>
    </target>

    <target name="Z-Set Developer">
        <var name="build_type"
             unset="true" />
        <property name="build_type"
                  value="developer" />
        <echo>Build type: ${build_type}</echo>
    </target>

    <!-- Copies out assets and rsls, builds the style that also builds the component library -->
    <target name="Copy Support Items">
        <flex-deploy-assets outputDirectory="${output.dir}"
                            outputApplicationDirectory="${output.dir.application}" /> <!-- web-app & web-app/swf -->
        <flex-deploy-rsls outputrslsdirectory="${output.dir.rsls}" /> <!-- web-app/swf/rsls -->
        <build-application-html applicationFile="${application_logh}"
                                applicationTitle="${application_logh.title}"
                                outputdirectory="${output.dir.views}" /> <!-- grails-app/views -->
    </target>

    <!-- Build component library SWC and RSL -->
    <target name="Build Component Library"
            depends="Build Component Library SWC, Build Component Library RSL" />

    <!-- Build production library SWC -->
    <target name="Build Component Library SWC">
        <flex-compile-production-swc ouputrslsdirectory="${output.dir.rsls}"
                                     swc-name="componentLibrary" /> <!-- web-app/swf/rsls -->
    </target>

    <!-- Build RSL from swc and update digest -->
    <target name="Build Component Library RSL">
        <create-rsl swc-name="componentLibrary" />
    </target>

    <!-- Build out styles swf -->
    <target name="Build Styles">
        <flex-compile-styles csslocation="${theme.app.location}"
                             cssname="LOGH"
                             outputApplicationDirectory="${output.dir.application}" />  <!-- ...web-app/swf -->
    </target>

    <!-- Compile the application file. -->
    <target name="Build Application">
        <flex-compile application="${application_logh}"
                      build.config="${build_type}"
                      applicationName="${application_logh.name}"
                      outputApplicationDirectory="${output.dir.application}"
                      outputModuleDirectory="${output.dir.modules}"
                      outputRslsDirectory="${output.dir.rsls}" /> <!-- app=web-app/swf, modules=web-app/swf/modules, rsls=web-app/swf/rsls -->
    </target>

    <!-- build all modules -->
    <target name="Build All Modules"
            depends="Build LOGH Login Module, Build LOGH User Module" />

    <!-- build login module -->
    <target name="Build LOGH Login Module"
            description="Build LOGH Login Module">
        <module-compile modulePath="/com/loseorgohome/modules/LOGHLoginModule"
                        moduleName="LOGHLoginModule"
                        applicationName="${application_logh}"
                        build.config="${build_type}"
                        outputApplicationDirectory="${output.dir.application}"
                        outputModuleDirectory="${output.dir.modules}"
                        outputRslsDirectory="${output.dir.rsls}" /> <!-- app=web-app/swf, modules=web-app/swf/modules, rsls=web-app/swf/rsls -->
    </target>

    <!-- build user module -->
    <target name="Build LOGH User Module"
            description="Build LOGH Users Module">
        <module-compile modulePath="/com/loseorgohome/modules/LOGHUserModule"
                        moduleName="LOGHUserModule"
                        applicationName="${application_logh}"
                        build.config="${build_type}"
                        outputApplicationDirectory="${output.dir.application}"
                        outputModuleDirectory="${output.dir.modules}"
                        outputRslsDirectory="${output.dir.rsls}" />  <!-- app=web-app/swf, modules=web-app/swf/modules, rsls=web-app/swf/rsls -->
    </target>

    <!-- Build out asdocs -->
    <target name="Build ASDocs">
        <flex-deploy-ASDoc outputApplicationDirectory="${output.dir.application}"
            outputRslDirectory="${output.dir.rsls}" /> <!-- app=web-app/swf, rsls=web-app/swf/rsls -->
    </target>

    <!-- Build RSL from swc and update digest -->
    <target name="Build Third Party Library RSL">
        <sequential>
            <create-third-party-rsl swc-name="module-0.17"
                lib-sub-dir="cairngorm3" />
            <create-third-party-rsl swc-name="observerParsley-1.15"
                lib-sub-dir="cairngorm3" />
            <create-third-party-rsl swc-name="parsley-flex4-2.4.1"
                lib-sub-dir="cairngorm3" />
            <create-third-party-rsl swc-name="popup-1.9"
                lib-sub-dir="cairngorm3" />
            <create-third-party-rsl swc-name="popupParsley-1.9"
                lib-sub-dir="cairngorm3" />
            <create-third-party-rsl swc-name="spicelib-flex-2.4.0"
                lib-sub-dir="cairngorm3" />
            <create-third-party-rsl swc-name="validation-1.12"
                lib-sub-dir="cairngorm3" />
        </sequential>
    </target>

    <target name="Clean">
        <delete dir="${output.dir.application}" /> <!-- ...web-app/swf -->
        <delete file="${output.dir}/crossdomain.xml" /> <!-- ...web-app -->
        <delete file="${output.dir.views}/index.gsp" /> <!-- ...grails-app/views -->
    </target>

</project>
